server:
  port: 18080


spring:
  application:
    name: data-server
  http-pool:
    # 连接池最大连接数
    max-total: 3000
    # 每个rount请求的最大连接数
    default-max-per-route: 20
    # 空闲多长时间（毫秒）来校验连接的有效性
    validate-after-inactivity: 200000
    # 建立连接的最大超时时间（毫秒）
    connect-timeout: 200000
    # 获取连接的最大超时时间（毫秒）
    connection-request-timeout: 200000
    # 与服务端保持连接的最大时间（毫秒）
    socket-timeout: 200000
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://192.168.1.10:3306/security?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true&allowPublicKeyRetrieval=true
    driver-class-name: com.mysql.jdbc.Driver
    druid:
      # 初始化大小，最小，最大
      initial-size: 10
      min-idle: 10
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存时间
      min-evictable-idle-time-millis: 300000

      validation-query: SELECT 1 FROM sys_user
  redis:
    host: 192.168.1.10
    port: 6379


xxl:
  job:
    admin:
      # 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。
      addresses: http://192.168.1.10:8090/xxl-job-admin
      # addresses: http://192.168.110.2:9090/xxl-job-admin
    # 执行器通讯TOKEN [选填]：非空时启用 系统默认 default_token
    #accessToken: default_token
    executor:
      # 执行器的应用名称
      appname: dzr-xxl-job
      # 执行器注册 [选填]：优先使用该配置作为注册地址
      address: ""
      # 执行器IP [选填]：默认为空表示自动获取IP
      ip: ""
      # 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999
      port: 9999
      # 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；
      #logpath: D:\Codes\logs
      #logpath: /data/logs/mls/job
      # 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；
      logretentiondays: 7



mybatis:
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.core.*


#showSql
logging:
  level:
    com:
      example:
        mapper : info
      springboot:
        test:
          mapper: info
eureka:
  client:
    service-url:
      defaultZone: http://192.168.1.10:6868/eureka
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}
    hostname: 192.168.1.10


guava:
  cache:
    config:
      # 并发级别为,并发级别是指可以同事写缓存的线程数
      concurrencyLevel: 8
      #缓存最大容量,超过之后会按照LRU最近最少使用算法来移除缓存项
      maximumSize: 1000000000
      #设置写缓存后,多长时间过期  时间单位为毫秒
      expireAfterWrite: 1000000000
      #设置缓存容量的初始容量
      initialCapacity: 10000000
      #如果缓存过期，恰好有多个线程读取同一个key的值，那么guava只允许一个线程去加载数据，其余线程
      #阻塞。
      #这虽然可以防止大量请求穿透缓存，但是效率低下。
      #使用refreshAfterWrite可以做到：只阻塞加载数据的线程，其余线程返回旧数据。
      #时间单位为 毫秒
      refreshAfterWrite: 1000000000
xxl:
  job:
    admin:
      # 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。
      addresses: http://192.168.1.10:8090/xxl-job-admin
      # addresses: http://192.168.110.2:9090/xxl-job-admin
    # 执行器通讯TOKEN [选填]：非空时启用 系统默认 default_token
    #accessToken: default_token
    executor:
      # 执行器的应用名称
      appname: dzr-xxl-job
      # 执行器注册 [选填]：优先使用该配置作为注册地址
      address: ""
      # 执行器IP [选填]：默认为空表示自动获取IP
      ip: ""
      # 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999
      port: 28998
      # 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；
      #logpath: D:\Codes\logs
      #logpath: /data/logs/mls/job
      # 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；
      logretentiondays: 7
